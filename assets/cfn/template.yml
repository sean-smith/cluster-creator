Parameters:
  APIStack:
    Type: String
    Description: "Name of the AWS ParallelCluster API Stack, this needs to be deployed before this stack can be created. See: "
  ClusterName:
    Type: String
    Description: Name of the AWS ParallelCluster Cluster.
  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet to launch your instances in.
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Existing EC2 Keypair, allows you to SSH into the head node.
  ConfigFile:
    Type: String
    Description: Base64 encoded config file generated by cluster-creator.swsmith.cc.
Resources:
  CreateClusterServiceRole94238E7C:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              AWS:
                Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":iam::"
                    - Ref: AWS::AccountId
                    - :root
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: ClusterCreator/CreateCluster/ServiceRole/Resource
  CreateClusterCB024960:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |-
          #!/usr/bin/env python3
          import json
          from base64 import b64decode, b64encode
          from os import replace
          from pprint import pprint
          import boto3
          import botocore
          import requests

          def sigv4_request(method, host, path, params, headers, body):
              "Adds authorization headers for sigv4 to headers parameter."
              endpoint = host.replace("https://", "").replace("http://", "")
              _api_id, _service, region, _domain = endpoint.split(".", maxsplit=3)

              request_parameters = "&".join([f"{k}={v}" for k, v in params.items()])
              url = f"{host}{path}?{request_parameters}"

              session = botocore.session.Session()
              body_data = json.dumps(body) if body else None
              request = botocore.awsrequest.AWSRequest(method=method, url=url, data=body_data)
              botocore.auth.SigV4Auth(session.get_credentials(), "execute-api", region).add_auth(request)
              boto_request = request.prepare()

              req_call = {
                  "POST": requests.post,
                  "GET": requests.get,
                  "PUT": requests.put,
                  "PATCH": requests.patch,
                  "DELETE": requests.delete,
              }.get(method)

              for k, val in headers.items():
                  boto_request.headers[k] = val

              return req_call(boto_request.url, data=body_data, headers=boto_request.headers, timeout=30)

          def create(region, baseurl, cluster_name, config_file):
              path = "/v3/clusters"
              params = {"region": region}
              body = {"clusterConfiguration": config_file, "clusterName": cluster_name}
              headers = {"content-type": "application/json"}
              resp = sigv4_request("POST", baseurl, path, params, headers, body)
              pprint(resp.json())
              if 'cluster' in resp.json():
                stack_name = resp.json().get('cluster').get('cloudformationStackArn')
                return {'PhysicalResourceId': stack_name}
              else:
                raise Exception(resp.json())

          def delete(region, baseurl, cluster_name):
              path = "/v3/clusters/{cluster_name}"
              params = {"region": region}
              resp = sigv4_request("GET", baseurl, path, params, {}, None)
              pprint(resp.json())

          def list_clusters(region, baseurl):
              path = "/v3/clusters"
              params = {"region": region}
              resp = sigv4_request("GET", baseurl, path, params, {}, None)
              pprint(resp.json())

          def substitute_vars(config, subnet_id, key_name):
              return config.format(key_name=key_name, subnet_id=subnet_id)

          def on_event(event, context):
              pprint(event)
              region = event['ResourceProperties']['region']
              baseurl = event['ResourceProperties']['baseurl']
              cluster_name = event['ResourceProperties']['name']
              if event['RequestType'] in ['Create', 'Update']:
                  config_template = b64decode(event['ResourceProperties']['config']).decode("ascii")
                  subnet_id = event['ResourceProperties']['subnet_id']
                  key_name = event['ResourceProperties']['key_name']
                  config = substitute_vars(config_template, subnet_id=subnet_id, key_name=key_name)
                  return create(region, baseurl, cluster_name, config)
              if event['RequestType'] == 'Delete':
                  delete(region, baseurl, cluster_name)
      Role:
        Fn::GetAtt:
          - CreateClusterServiceRole94238E7C
          - Arn
      Handler: index.on_event
      Runtime: python3.7
      Timeout: 60
    DependsOn:
      - CreateClusterServiceRole94238E7C
    Metadata:
      aws:cdk:path: ClusterCreator/CreateCluster/Resource
  apiuserpolicy7CAAB972:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: execute-api:Invoke
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: apiuserpolicy7CAAB972
      Roles:
        - Ref: CreateClusterServiceRole94238E7C
    Metadata:
      aws:cdk:path: ClusterCreator/api-user-policy/Resource
  CustomResourceProviderframeworkonEventServiceRole7EBC5835:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: ClusterCreator/CustomResourceProvider/framework-onEvent/ServiceRole/Resource
  CustomResourceProviderframeworkonEventServiceRoleDefaultPolicy93CD1647:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: lambda:InvokeFunction
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - CreateClusterCB024960
                - Arn
        Version: "2012-10-17"
      PolicyName: CustomResourceProviderframeworkonEventServiceRoleDefaultPolicy93CD1647
      Roles:
        - Ref: CustomResourceProviderframeworkonEventServiceRole7EBC5835
    Metadata:
      aws:cdk:path: ClusterCreator/CustomResourceProvider/framework-onEvent/ServiceRole/DefaultPolicy/Resource
  CustomResourceProviderframeworkonEvent0AA4376C:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: cluster-creator
        S3Key: assets/cfn/cdk.zip
      Role:
        Fn::GetAtt:
          - CustomResourceProviderframeworkonEventServiceRole7EBC5835
          - Arn
      Description: AWS CDK resource provider framework - onEvent (ClusterCreator/CustomResourceProvider)
      Environment:
        Variables:
          USER_ON_EVENT_FUNCTION_ARN:
            Fn::GetAtt:
              - CreateClusterCB024960
              - Arn
      Handler: framework.onEvent
      Runtime: nodejs14.x
      Timeout: 900
    DependsOn:
      - CustomResourceProviderframeworkonEventServiceRoleDefaultPolicy93CD1647
      - CustomResourceProviderframeworkonEventServiceRole7EBC5835
    Metadata:
      aws:cdk:path: ClusterCreator/CustomResourceProvider/framework-onEvent/Resource
      aws:asset:path: asset.c691172cdeefa2c91b5a2907f9d81118e47597634943344795f1a844192dd49c
      aws:asset:property: Code
  AWSParallelCluster:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CustomResourceProviderframeworkonEvent0AA4376C
          - Arn
      name:
        Ref: ClusterName
      region:
        Ref: AWS::Region
      baseurl:
        Fn::ImportValue:
          Fn::Join:
            - ""
            - - Ref: APIStack
              - -ParallelClusterApiInvokeUrl
      config:
        Ref: ConfigFile
      key_name:
        Ref: KeyName
      subnet_id:
        Ref: SubnetId
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: ClusterCreator/AWSParallelCluster/Default
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAAE02OwU7EMAxEv2XvqZdqD2hvsJU4V+ULTGqW0CaWbAe0ivLvNF2QOM14NLZfD31/hofDE35r5+flWDwLQXk19Isb3tOIgpGMxD2rkm35NaSrGzipSfbmhqzGcSLlLJ7ayn+/9eZggVN17UNZMb7NCOUlJ9/i1vnz1QWMUCZe72eajrwGf9tBdlednjpsJAo70DbDJfuF7IJK1fkdp5NfBoVR+CvMJNWNN/vgdDzBGR4PnxpCJzlZiATTXX8AVR5DDw0BAAA=
    Metadata:
      aws:cdk:path: ClusterCreator/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2

