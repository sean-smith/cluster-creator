from os import path

from aws_cdk import (
    core as cdk,
    aws_lambda as aws_lambda,
    custom_resources as cr,
    aws_iam as iam
)

class ClusterCreator(cdk.Stack):

    def __init__(self, scope: cdk.Construct, construct_id: str, **kwargs) -> None:
        super().__init__(scope, construct_id, **kwargs)

        api_stack = cdk.CfnParameter(
            self, 'APIStack',
            description='Name of the AWS ParallelCluster API Stack, this needs to be deployed before this stack can be created. See: ',
            type='String'
        )

        cluster_name = cdk.CfnParameter(
            self, 'ClusterName',
            description='Name of the AWS ParallelCluster Cluster.',
            type='String'
        )

        subnet_id = cdk.CfnParameter(
            self, 'SubnetId',
            description='Subnet to launch your instances in.',
            type='AWS::EC2::Subnet::Id'
        )

        key_name = cdk.CfnParameter(
            self, 'KeyName',
            description='Existing EC2 Keypair, allows you to SSH into the head node.',
            type='AWS::EC2::KeyPair::KeyName'
        )

        config = cdk.CfnParameter(
            self, 'ConfigFile',
            description='Base64 encoded config file generated by cluster-creator.swsmith.cc.',
            type='String'
        )

        with open(path.join(path.dirname(__file__), 'lambda/api.py')) as file:
            code = file.read()


        # lambda function to call create-cluster API
        my_lambda = aws_lambda.Function(
            self, 'CreateCluster',
            runtime=aws_lambda.Runtime.PYTHON_3_7,
            code=aws_lambda.Code.from_inline(code),
            handler='index.on_event',
            timeout=cdk.Duration.seconds(60)
        )

        # create a policy statement
        api_user_statement = iam.PolicyStatement(
            actions=['execute-api:Invoke'],
            resources=['*'],
        )

        # add the policy to the Function's role
        my_lambda.role.attach_inline_policy(
            iam.Policy(self, 'api-user-policy',
                statements=[api_user_statement],
            ),
        )

        # add a trust relationship
        my_lambda.role.assume_role_policy.add_statements(
            iam.PolicyStatement(
                actions=['sts:AssumeRole'],
                effect=iam.Effect.ALLOW,
                principals=[iam.AccountPrincipal(account_id=self.account)]
            )
        )

        # custom resource to invoke that lambda
        provider = cr.Provider(
            self, 'CustomResourceProvider',
            on_event_handler=my_lambda
        )

        # invoke lambda using provided parameters
        cdk.CustomResource(
            self,
            'AWSParallelCluster',
            service_token=provider.service_token,
            properties={
                "name": cluster_name,
                "region": self.region,
                "baseurl": cdk.Fn.import_value(shared_value_to_import=f'{api_stack.value_as_string}-ParallelClusterApiInvokeUrl'),
                "config": config,
                "key_name": key_name,
                "subnet_id": subnet_id,
            },
        )
